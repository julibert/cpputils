/*
 * Copyright 2019-present Julián Bermúdez Ortega.
 *
 * This file is part of julibert::cpputils.
 *
 * julibert::cpputils is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * julibert::cpputils is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with julibert::cpputils.  If not, see <https://www.gnu.org/licenses/>.
 */
#ifndef VANEINS_UTIL_TREE_TREE_HPP_
#define VANEINS_UTIL_TREE_TREE_HPP_

#include <julibert/util/tree/node.hpp>

namespace julibert {
namespace cpputils {

template<typename T>
class Tree 
{
private:
    class IteratorInterface
    {
    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type = T;
        using difference_type = int;
        using pointer = T*;
        using reference = T&;

        explicit IteratorInterface(const Node<T>& node)
            : node_{node}
            , child_it_{}
        {}

        virtual IteratorInterface& operator++() = 0;

        IteratorInterface operator++(int)
        {
            IteratorInterface rv = *this;
            ++(*this);
            return rv;
        }

        IteratorInterface operator--(int)
        {
            IteratorInterface rv = *this;
            --(*this);
            return rv;
        }

        bool operator==(PreOrderIterator other) const
        {
            return (*node_ == *other.node_);
        }

        bool operator!=(PreOrderIterator other) const
        {
            return !(*this == other);
        }

    protected:
        const Node<T>& node_;
        std::vector<Node<T>>::iterator child_it_;
    };

public:
    class PreOrderIterator : public IteratorInterface
    {
    public:
        PreOrderIterator& operator++() final
        {
            // TODO
            return *this;
        }

        PreOrderIterator& operator--()
        {
            // TODO
            return *this;
        }
    };

public:
    Tree(const Node<T>& root)
        : root_{root}
    {}

private:
    Node<T> root_;
};

} // namespace cpputils
} // namespace julibert

#endif // VANEINS_UTIL_TREE_TREE_HPP_